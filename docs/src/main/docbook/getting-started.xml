<?xml version="1.0"?>
<!--

    Copyright (c) 2013, 2022 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!DOCTYPE chapter [<!ENTITY % ents SYSTEM "tyrus.ent" > %ents; ]>
<chapter xmlns="http://docbook.org/ns/docbook"
         version="5.0"
         xml:lang="en"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd"
         xml:id="getting-started">
    <title>Getting Started</title>

    <para>
        This chapter provides a quick introduction on how to get started building
        WebSocket services using &ja4w; and Tyrus. The example described here presents how to implement
        simple websocket service as JavaEE web application that can be deployed on any servlet container
        supporting Servlet 5 and higher. It also discusses starting Tyrus in standalone mode.
    </para>
    <section xml:id="getting-started-wsapi-artifact">
        <title>WebSocket Services Using &ja4w;</title>
            <para>
                First, to use the &ja4w; in your project you need to depend on the following artifact:
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;jakarta.websocket&lt;/groupId&gt;
    &lt;artifactId&gt;jakarta.websocket-api&lt;/artifactId&gt;
    &lt;version&gt;&apiversion;&lt;/version&gt;
&lt;/dependency&gt;
</programlisting>
            </para>
            <section>
                <title>Creating Annotated Server Endpoint</title>
            <para>
                In this section we will create a simple server side websocket endpoint which will echo the received
                message back to the sender. We will deploy this endpoint on the container.
            </para>
             <para>
                In &ja4w; and Tyrus, there are two basic approaches how to create an endpoint - either annotated endpoint,
                or programmatic endpoint.
                By annotated endpoint we mean endpoint constructed by using annotations (<code>jakarta.websocket.server.ServerEndpoint</code>
                for server endpoint and <code>jakarta.websocket.ClientEndpoint</code> for client endpoint), like in
                <link linkend="websocket-annotated-echo-endpoint">"Annotated Echo Endpoint"</link>.
                <example xml:id="websocket-annotated-echo-endpoint">
                    <title>Annotated Echo Endpoint</title>
<programlisting language="java" linenumbering="numbered">@ServerEndpoint(value = "/echo")
public class EchoEndpointAnnotated {
    @OnMessage
    public String onMessage(String message, Session session) {
        return message;
    }
}
</programlisting>
                </example>
            </para>
        <para>
            The functionality of the <code>EchoEndpointAnnotated</code> is fairly simple - to send the received message
            back to the sender. To turn a POJO (Plain Old Java Object) to WebSocket server endpoint, the annotation
            <code>@ServerEndpoint(value = "/echo")</code> needs to be put on the POJO - see line 1. The URI path of the endpoint
            is <code>"/echo"</code>. The annotation <code>@OnMessage</code> - line 3 on the method <code>public String
            onMessage(String message, Session session)</code> indicates that this method
            will be called whenever text message is received. On line 5 in this method the message is sent back to
            the user by returning it from the message.
        </para>
        <para>
            The application containing only the <code>EchoEndpointAnnotated</code> class can be deployed to the container.
        </para>
            </section>
        <section>
            <title>Client Endpoint</title>
                <para>
                    Let's create the client part of the application. The client part may be written in JavaScript or any
                    other technology supporting WebSockets. We will use &ja4w; and Tyrus to demonstrate how to develop
                    programmatic client endpoint.
                    The following code is used as a client part to communicate with the <code>EchoEndpoint</code> deployed on server
                    using Tyrus and &ja4w;.
                </para>
                <para>
                    The example <link linkend="websocket-client-endpoint">"Client Endpoint"</link> utilizes the concept
                    of the programmatic endpoint. By programmatic endpoint we mean endpoint which is created by extending
                    class <code>jakarta.websocket.Endpoint</code>.
                    The example is standalone java application which needs to depend on some Tyrus artifacts to work
                    correctly, see <link linkend="standalone-mode">"Tyrus Standalone Mode"</link>.
                    In the example first the <code>CountDownLatch</code> is initialized. It is needed as a bocking data
                    structure - on line 31 it either waits for 100 seconds, or until it gets counted down (line 22).
                    On line 9 the <code>jakarta.websocket.ClientEndpointConfig</code> is created -  we will need it later
                    to connect the endpoint to the server. On line 11 the <code>org.glassfish.tyrus.client.ClientManager</code>
                    is created. it implements the <code>jakarta.websocket.WebSocketContainer</code> and is used to connect
                    to server. This happens on next line. The client endpoint functionality is contained in the <code>
                    jakarta.websocket.Endpoint</code> lazy instantiation. In the <code>onOpen</code> method new MessageHandler
                    is registered (the received message is just printed on the console and the latch is counted down). After
                    the registration the message is sent to the server (line 25).
                    <example xml:id="websocket-client-endpoint">
                        <title>Client Endpoint</title>
                        <programlisting language="java" linenumbering="numbered">public class DocClient {
    private static CountDownLatch messageLatch;
    private static final String SENT_MESSAGE = "Hello World";

    public static void main(String [] args){
        try {
            messageLatch = new CountDownLatch(1);

            final ClientEndpointConfig cec = ClientEndpointConfig.Builder.create().build();

            ClientManager client = ClientManager.createClient();
            client.connectToServer(new Endpoint() {

                @Override
                public void onOpen(Session session, EndpointConfig config) {
                    try {
                        session.addMessageHandler(new MessageHandler.Whole&lt;String&gt;() {

                            @Override
                            public void onMessage(String message) {
                                System.out.println("Received message: "+message);
                                messageLatch.countDown();
                            }
                        });
                        session.getBasicRemote().sendText(SENT_MESSAGE);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }, cec, new URI("ws://localhost:8025/websockets/echo"));
            messageLatch.await(100, TimeUnit.SECONDS);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}</programlisting>
                    </example>
                </para>
            </section>
    <section xml:id="websocket-programmatic-endpoint">
        <title>Creating Server Endpoint Programmatically</title>
        <para>
            Similarly to <link linkend="websocket-client-endpoint">"Client Endpoint"</link> the server registered endpoint
            may also be the programmatic one:
            <example xml:id="websocket-programmatic-echo-endpoint">
                <title>Programmatic Echo Endpoint</title>
<programlisting language="java" linenumbering="numbered">public class EchoEndpointProgrammatic extends Endpoint {
    @Override
    public void onOpen(final Session session, EndpointConfig config) {
        session.addMessageHandler(new MessageHandler.Whole&lt;String&gt;() {
            @Override
            public void onMessage(String message) {
                try {
                    session.getBasicRemote().sendText(message);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }
}</programlisting>
            </example>
        </para>
        <para>
            The functionality of the <code>EchoEndpointProgrammatic</code> is fairly simple - to send the received message back to the sender.
            The programmatic server endpoint needs to extend <code>jakarta.websocket.Endpoint</code> - line 1.
            Mehod <code>public void onOpen(final Session session, EndpointConfig config)</code> gets called once new
            connection to this endpoin0t is opened. In this method the <code>MessageHandler</code> is registered to the
            <code>jakarta.websocket.Session</code> instance, which opened the connection. Method <code>public void
            onMessage(String message)</code> gets called once the message is received. On line 8 the message
            is sent back to the sender.
        </para>
    </section>
    <para>
        To see how both annotated and programmatic endpoints may be deployed please check the section Deployment.
        In short: you need to put the server endpoint classes into WAR, deploy on server and the endpoints will
        be scanned by server and deployed.
    </para>

        <section xml:id="standalone-mode">
            <title>Tyrus in Standalone Mode</title>
            <para>

            </para>
            <para>
                To use Tyrus in standalone mode it is necessary to depend on correct Tyrus artifacts.
                The following artifacts need to be added to your pom to use Tyrus:
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;org.glassfish.tyrus&lt;/groupId&gt;
    &lt;artifactId&gt;tyrus-server&lt;/artifactId&gt;
    &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.glassfish.tyrus&lt;/groupId&gt;
    &lt;artifactId&gt;tyrus-container-grizzly-server&lt;/artifactId&gt;
    &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
            </para>
            <para>
                Let's use the very same example like for &ja4w; and deploy the <code>EchoEndpointAnnotated</code> on the
                standalone Tyrus server on the hostname "localhost", port 8025 and path "/websockets", so the endpoint
                will be available at address "ws://localhost:8025/websockets/echo".
<programlisting language="java" linenumbering="unnumbered">public void runServer() {
    Server server = new Server("localhost", 8025, "/websockets", null, EchoEndpoint.class);

    try {
        server.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Please press a key to stop the server.");
        reader.readLine();
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        server.stop();
    }
}</programlisting>
            </para>
        </section>
    </section>
    <section xml:id="getting-started-using-archetype">
        <title>Creating a New Project from Maven Archetype</title>
        <section>
            <title>Executing maven</title>
            Since starting from a Maven project is the most convenient way for working with Tyrus, let's now have a look
            at this approach. We will now create a new Tyrus project that runs on top of a &grizzly.link; container. We will
            use a Tyrus-provided maven archetype. To create the project, execute the following Maven command in the directory
            where the new project should reside:

            <programlisting language="bash" linenumbering="unnumbered">mvn archetype:generate -DarchetypeArtifactId=tyrus-archetype-echo \
-DarchetypeGroupId=org.glassfish.tyrus.archetypes -DinteractiveMode=false \
-DgroupId=com.example -DartifactId=echo-service -Dpackage=com.example \
-DarchetypeVersion=&version;</programlisting>

            Feel free to adjust the <literal>groupId</literal>, <literal>package</literal> and/or <literal>artifactId</literal>
            of your new project. Alternatively, you can change it by updating the new project pom.xml once it gets generated.
        </section>
        <section>
            <title>Exploring the Newly Created Project</title>

            <para>
                Once the project generation from a Tyrus maven archetype is successfully finished, you should see the new
                <literal>echo-service</literal> project directory created in your current location. The directory contains
                a standard Maven project structure:

                <simplelist>
                    <member>
                        Project build and management configuration is described in the <literal>pom.xml</literal> located
                        in the project root directory.
                    </member>
                    <member>Project sources are located under <literal>src/main/java</literal>.</member>
                    <member>Project resources are located under <literal>src/main/resources</literal>.</member>
                    <member>Project web application files are located under <literal>src/main/webapp</literal>.</member>
                </simplelist>

                The project contains the simple <literal>EchoEndpoint</literal> class which looks
                (similar to <link linkend="websocket-annotated-echo-endpoint">"Annotated Echo Endpoint"</link>) as follows:
                <programlisting language="java" linenumbering="numbered">package com.example;

import jakarta.websocket.OnMessage;
import jakarta.websocket.Session;
import jakarta.websocket.server.ServerEndpoint;

/**
* Server endpoint "listening" on path "/echo".
*/
@ServerEndpoint("/echo")
public class EchoEndpoint {

    /**
    * Method handling incoming text messages.
    * <p/>
    * This implementations just sends back received message.
    *
    * @param message received message.
    * @return returned value will be sent back to client. You can also declare this method to not return anything. In
    * that case, you would need to obtain {@link jakarta.websocket.Session} object and call
    * {@link jakarta.websocket.Session#getBasicRemote()#sendText();} in order to send message.
    */
    @OnMessage
    public String echo(String message) {
        return message;
    }
}</programlisting>
            </para>
            <para>
                Another piece of code that has been generated in this skeleton project is a <literal>EchoTest</literal>
                unit test class that is located in the same <literal>com.example</literal> package as the
                <literal>EchoEndpoint</literal> class, however, this unit test class is placed into the maven project test source
                directory <literal>src/test/java</literal>
                (similar to <link linkend="websocket-client-endpoint">"Client Endpoint"</link>):
                <programlisting language="java" linenumbering="numbered">public class EchoTest extends TestContainer {

    public static final String MESSAGE = "Do or do not, there is no try.";

    @Test
    public void testEcho() throws DeploymentException, InterruptedException, IOException {
        final Server server = startServer(EchoEndpoint.class);

        final CountDownLatch messageLatch = new CountDownLatch(1);

        try {
            final ClientManager client = ClientManager.createClient();
            client.connectToServer(new Endpoint() {
                @Override
                public void onOpen(Session session, EndpointConfig EndpointConfig) {

                    try {
                        session.addMessageHandler(new MessageHandler.Whole&lt;String&gt;() {
                            @Override
                            public void onMessage(String message) {
                                System.out.println("# Received: " + message);

                                if (message.equals(MESSAGE)) {
                                    messageLatch.countDown();
                                }
                            }
                        });

                        session.getBasicRemote().sendText(MESSAGE);
                    } catch (IOException e) {
                        // do nothing
                    }
                }
            }, ClientEndpointConfig.Builder.create().build(), getURI(EchoEndpoint.class));

            assertTrue(messageLatch.await(1, TimeUnit.SECONDS));

        } catch (Exception e) {
            e.printStackTrace();
            fail();
        } finally {
            stopServer(server);
        }
    }
}</programlisting>

                In this unit test, a Grizzly container is first started and server application is deployed using the static call
                <literal>TestContainer.startServer()</literal>.
                Next, WebSocket client instance <literal>client</literal> is built and then a programmatic WebSocket
                <literal>Endpoint</literal> is used to connect to the <literal>EchoEndpoint</literal> deployed on the Grizzly server
                at <literal>ws://localhost:8025/e2e-test/echo</literal>. The value of port <literal>8025</literal> and context path
                <literal>e2e-test</literal> are default values preset at the <literal>TestContainer</literal>.
            </para>
            <para>
                The generated project structure also contains an <literal>index.html</literal> file, stored in
                <literal>src/test/webapp</literal> folder. This web page contains a javascript WebSocket client that is
                capable of sending WebSocket requests to the <literal>EchoEndpoint</literal>. This web page is deployed along
                the war application in the WebSocket container such as Tyrus.
            </para>
        </section>
        <section>
            <title xml:id="building-project">Building the generated project</title>
            <para>
                Now that we have seen the content of the project, let's try to test-run it. To do this, we need to invoke following
                command on the command line:

                <programlisting language="bash" linenumbering="unnumbered">mvn clean package</programlisting>

                This will compile the project and run the project unit tests. We should see a similar output that informs about a
                successful build once the build is finished:

                <screen linenumbering="unnumbered">Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] Packaging webapp
[INFO] Assembling webapp [echo-service] in [.../echo-service/target/echo-service]
[INFO] Processing war project
[INFO] Copying webapp resources [.../echo-service/src/main/webapp]
[INFO] Building war: .../echo-service/target/echo-service.war
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.979 s
[INFO] Finished at: 2022-01-28T14:23:45+01:00
[INFO] Final Memory: 17M/490M
[INFO] ------------------------------------------------------------------------</screen>
                Now you are ready to take the packaged WAR (located under <literal>./target/echo-service.war</literal>)
                and deploy it to a WebSocket container of your choice.
                <important>
                    <para>
                        To deploy the application, you will need a WebSocket compliant container (such as Tyrus). Tyrus can be
                        found for instance in Glassfish 7. It is also possible to create a packaged WAR with Tyrus jars included
                        to deploy to a Servlet 5/Servlet 6 compliant container.
                    </para>
                </important>
            </para>
        </section>
        <section>
            <title xml:id="running-the-app">Running the deployed application</title>
            <para>
                Once the war is deployed, it can be run on the deployment URI such as
                <literal>localhost:8080/echo-service/</literal>(the included <literal>index.html</literal> web page can be
                opened in a web browser). The web page has a title <literal>Web Socket Echo Client</literal> and contains a
                button with a label <literal>Press me</literal> and a text field prefilled with <literal>Hello Web Sockets !</literal>
                When the button is pressed, the WebSocket echo service queried and the web page contains a communication:
                <screen linenumbering="unnumbered">CONNECTED

SENT: Hello Web Sockets !

RECEIVED: Hello Web Sockets !</screen>
            </para>
        </section>
    </section>
</chapter>
